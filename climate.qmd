---
title: Habitat suitability under climate change
jupyter: python3
---


Our changing climate is changing where key grassland species can live,
and grassland management and restoration practices will need to take
this into
account
([Kane et al. 2017](https://www.frontiersin.org/articles/10.3389/fpls.2017.00730/full)).

In this coding challenge, create a habitat suitability model
for a species of your choice that lives in the continental United States (CONUS).
We have this limitation because the downscaled climate data we
suggest, the
[MACAv2 dataset](https://www.climatologylab.org/maca.html),
is only available in CONUS.
If you find other downscaled climate data at an appropriate resolution you are
welcome to choose a different study area.
If you don’t have anything in mind, you can take a look at _Sorghastrum nutans_,
a grass native to North America.
In the past 50 years, its range has moved northward
([GBIF _S. nutans_](https://www.gbif.org/species/2704414)).

Your suitability assessment will be based on combining multiple data
layers related to soil, topography, and climate.
You will also need to
create a **modular, reproducible, workflow** using functions and loops.
To do this effectively, we recommend planning your code out in advance
using a technique such as pseudocode outline or a flow diagram.
We recommend planning each of the blocks below out into multiple steps.
It is unnecessary to write a step for every line of code unles you find that useful.
As a rule of thumb, aim for 2-5 line code chuck for major structure steps.

### References

- [Spring 3. Habitat Suitabilty under Climate Change](https://cu-esiil-edu.github.io/esiil-learning-portal/foundations/notebooks/13-habitat-climate-change/climate.html)
(updated project)
- [Fall 5. Habitat Suitability Coding Challenge](https://cu-esiil-edu.github.io/esiil-learning-portal/foundations/notebooks/08-habitat/habitat.html)
(original project with code hints)
- [Notes](notes.qmd)
(notes from class discussions)
- [Yandell Fall Project](https://github.com/byandell-envsys/habitatSuitability)
  - [buffalo.md](https://github.com/byandell-envsys/habitatSuitability/blob/main/buffalo.md)
(rendered Markdown)
  - [buffalo.qmd](https://github.com/byandell-envsys/habitatSuitability/blob/main/buffalo.qmd)
(Quarto source)
  - [landmapy](https://github.com/byandell-envsys/landmapy)
(Python package)

## STEP 1: STUDY OVERVIEW

Before you begin coding, you will need to design your study.

**Reflect and Respond:**
What question do you hope to answer about potential future changes in
habitat suitability?

YOUR QUESTION HERE

### Species

Select the species you want to study, and research it’s habitat
parameters in scientific studies or other reliable sources.
You will want to look for reviews or overviews of the data, since an individual
study may not have the breadth needed for this purpose.
In the US, the National Resource Conservation Service can have helpful
fact sheets about different species.
University Extension programs are also good resources for summaries.

Based on your research, select soil, topographic, and climate
variables that you can use to determine if a particular location and
time period is a suitable habitat for your species.

**Reflect and Respond:**
Write a description of your species.
What habitat is it found in?
What is its geographic range?
What, if any, are conservation threats to the species?
What data will shed the most light on habitat suitability for this species?

YOUR SPECIES DESCRIPTION HERE

#### Blue Stem Description

Big bluestem is a warm-season grass native to the eastern two thirds of the United States
from the mid-western short grass prairies to the coastal plain.
It grows to 6 to 8 feet with short and scaly rhizomes and leaves that vary from light yellow-green to burgundy.
The seed head is coarse and not fluffy, typically with three spikelets looking like a turkey foot.

Below are two pictures of me and my (leashed) dog, Kylie, on a walk in
[Prairie Moraine County Park (Dane Co, WI)](https://parks-lwrd.danecounty.gov/park/PrairieMoraine)
surrounded by bluestem.
We were walking on the
[Ice Age National Scenic Trail Corridor](https://parks-lwrd.danecounty.gov/documents/PDFs/Maps/PrairieMoraine-OverviewWeb.pdf)
just north of the dog part.
The
[Ice Age Trail](https://www.iceagetrail.org/)
is a 1000-mile system that comprises a unique boundary separating the glaciated and "driftless" regions
across the state of Wisconsin.
Bluestem is found along much of this trail system.

<p float="center">
  <img src="images/bluestemdog.png" width="350" />
  <img src="images/bluestemfield.png" width="350" />
</p>

Bluestem can tolerate a wide variety of well-drained soils and typically does well on low fertility sites.
Big blue is commonly used in erosion control plantings.
While it may be slow to get started, it eventually provides excellent stability for sandy areas.
It is also a good native choice for grazing forage and provides excellent wildlife habitat.
Bobwhite quail and other ground-nesting birds use this clump-forming grass for nesting and forage cover.
In the longleaf pine ecosystem, the perennial big bluestem contributes to the fine flashy fuel needed for the maintenance of the ecosystem.

Bluestem can be used in the restoration of native vegetation in agricultural or pasture areas.
It is adapted to conventional tillage or native seed no-till drill.
Seeding rate for big bluestem ranges from 4 to 12 pounds per acre, lower for wildlife (quail) habitat establishment.
Local ecotypes are best when restoring native vegetation areas.

Bluestem grasses have root systems that reach significant depths.
In Buffalo Gap National Grassland, these grasses typically develop roots that extend up to 5 feet deep.
This deep root system helps them access water and nutrients from deeper soil layers, making them resilient in the semi-arid conditions of the grassland.

Blue Stem, according to [Greg](https://greg.app/), "need well-drained, nutrient-rich soils. The best soil types for this grass are sandy loam or loamy soil, which provide the right balance of drainage and nutrients. Aim for an organic matter content of 5-10%. This range is crucial for optimal growth, as it enhances soil fertility and structure. The ideal pH range for Big Bluestem is between 6.0 and 7.0. This slightly acidic to neutral pH is essential for nutrient availability, ensuring your plants can absorb what they need to thrive."

[Gardners.com](https://www.gardeners.com/how-to/what-type-of-soil-do-you-have/9120.html)
has a
[soil simplex figure](https://www.gardeners.com/globalassets/articles/gardening/2014content/9120-soil-texture-triangle-sample.png),
which puts sandy loam and loamy sand at 50-85% sand.

![](https://www.gardeners.com/globalassets/articles/gardening/2014content/9120-soil-texture-triangle-sample.png){fig-align="center"}

I could not find information on slope or aspect
but I have seen blue stem on flat areas and slopes.

### Sites

Select at least two site to study, such as two of the U.S. National Grasslands.
You can download the 
[National Grassland Units](https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.NationalGrassland.zip)
and select your study sites. 
Generate a site map for each location.

When selecting your sites, you might want to look for places that are
marginally habitable for this species, since those locations will be
most likely to show changes due to climate.

**Reflect and Respond:**
Write a site description for each of your sites, or for all of your
sites as a group if you have chosen a large number of linked sites.
What differences or trends do you expect to see among your sites?

#### Buffalo Gap and Oglala National Grasslands

This project examines habitat suitability for
[Blue Stem](https://greg.app/big-bluestem-soil/)
in the
[Buffalo Gap](https://www.fs.usda.gov/recarea/nebraska/recarea/?recid=30329)
and
[Oglala](https://www.fs.usda.gov/recarea/nebraska/recarea/?recid=30328)
National Grasslands.
See also
[PAD-US](https://www.usgs.gov/programs/gap-analysis-project/science/pad-us-data-overview).

These contiguous grasslands are located in
[Oceti Sakowin Oyate](https://americanindian.si.edu/nk360/plains-belonging-nation/oceti-sakowin), also known as the Lakota Nation or Great Sioux Nation, and in the US states of South Dakota and Nebraska.
For more information see
[Oceti Sakowin Essential Understandings & Standards](https://sdtribalrelations.sd.gov/docs/OSEUs-18.pdf).

Get grassland GeoDataFrames and focus on desired sites.
Pseudocode:

```python
data_dir = create_data_dir('habitat')
grassland_url = f"{data_dir}/National_Grassland_Units_(Feature_Layer).geojson"
grassland_gdf = gpd.read_file(grassland_url)
buffalo_gdf = grassland_gdf.loc[grassland_gdf['GRASSLANDNAME'].isin(
    ["Buffalo Gap National Grassland", "Oglala National Grassland"])]
plot_gdf_state(buffalo_gdf, aiannh=True)
```

Python code detail:

```{python}
import geopandas as gpd # read geojson file into gdf
from landmapy.initial import create_data_dir # create (or retrieve) data directory
from landmapy.plot import plot_gdf_state # plot gdf with state overlay
```

```{python}
%store -r buffalo_gdf
try:
    buffalo_gdf
except NameError:
    data_dir = create_data_dir('habitat')
    # Read all grasslands GeoJSON into `grassland_gdf`.
    grassland_url = f"{data_dir}/National_Grassland_Units_(Feature_Layer).geojson"
    grassland_gdf = gpd.read_file(grassland_url)
    # Subset to desired locations.
    buffalo_gdf = grassland_gdf.loc[grassland_gdf['GRASSLANDNAME'].isin(
        ["Buffalo Gap National Grassland", "Oglala National Grassland"])]
    %store buffalo_gdf
    print("buffalo_gdf created and stored")
else:
    print("buffalo_gdf retrieved from StoreMagic")
```

Black line separates South Dakota from Nebraska;
red line outlines part of Pine Ridge Reservation.

```{python}
#| label: fig-grasslands
plot_gdf_state(buffalo_gdf, aiannh=True)
```

### Time periods

In general when studying climate, we are interested in **climate
normals**, which are typically calculated from 30 years of data so that
they reflect the climate as a whole and not a single year which may be
anomalous. So if you are interested in the climate around 2050, download
at least data from 2035-2065.

**Reflect and Respond:**
Select at least two 30-year time periods to compare, such as
historical and 30 years into the future.
These time periods should help you to answer your scientific question.

#### Selected time periods

- `2006-2025`: recent 30 years
- `2036-2065`: 2050 +/- 15 years

### Climate models

There is a great deal of uncertainty among the many global climate models available.
One way to work with the variety is by using an
**ensemble** of models to try to capture that uncertainty.
This also gives you an idea of the range of possible values you might expect!
To be most efficient with your time and computing resources, you can use a
subset of all the climate models available to you.
However, for each scenario, you should attempt to include models that are:

- Warm and wet
- Warm and dry
- Cold and wet
- Cold and dry

for each of your sites.

To figure out which climate models to use, you will need to access
summary data near your sites for each of the climate models.
You can do this using the
[Climate Futures Toolbox Future Climate Scatter tool](https://climatetoolbox.org/tool/Future-Climate-Scatter).
There is no need to write code to select your climate models,
since this choice is something that requires your judgement
and only needs to be done once.

<p float="center">
  <img src="images/FutureClimate_45.png" width="350" />
  <img src="images/FutureClimate_85.png" width="350" />
</p>


If your question requires it, you can also choose to include multiple
climate variables, such as temperature and precipitation, and/or
multiple emissions scenarios, such as RCP4.5 and RCP8.5.

Choose at least 4 climate models that cover the range of possible
future climate variability at your sites.
How did you choose?

LIST THE CLIMATE MODELS YOU SELECTED HERE AND CITE THE CLIMATE TOOLBOX

## STEP 2: DATA ACCESS

### Soil data

The
[POLARIS dataset](http://hydrology.cee.duke.edu/POLARIS/)
is a convenient way to uniformly access a variety of soil parameters
such as pH and percent clay in the US.
It is available for a range of depths (in cm) and split into 1x1 degree tiles.

Write a **function with a numpy-style docstring** that will download
POLARIS data for a particular location, soil parameter, and soil depth.
Your function should account for the situation where your site boundary
crosses over multiple tiles, and merge the necessary data together.

Then, use loops to download and organize the rasters you will need to
complete this section.
Include soil parameters that will help you to answer your scientific question.
We recommend using a soil depth that best corresponds with the rooting depth
of your species.

Download soil raster layer for **sand** covering study area envelope using the
[POLARIS dataset](http://hydrology.cee.duke.edu/POLARIS/PROPERTIES/v1.0/).
Considering `sand` percentage `mean`. POLARIS data are available at 6 depths,
and Bluestem has roots down to 5 feet (150 cm),
which is the lowest strata measured (100-200 cm).
Data in the
[sand 100-200 cm directory](http://hydrology.cee.duke.edu/POLARIS/PROPERTIES/v1.0/sand/mean/100_200/)
are saved as separate tif files by longitude.
Buffalo Gap National Grassland is at (centroid) 43.4375° N, 103.0505° W,
while Oglala National Grassland is at 42.9404° N, 103.5900° W.
Below we use the `.total_bounds` extension on `buffalo_gdf`
with the `merge_soil()` function in the
[landmapy.polaris](https://github.com/byandell-envsys/landmapy/blob/main/landmapy/polaris.py)
module to automate finding bounds.

#### Sand Soil Measure

Get and show `mean` of `sand` at depth `100-200m` with functions.
Merge soil tiles to create `buffalo_da` and plot.
Pseudocode:

```python
buffalo_da = merge_soil(buffalo_gdf, "sand", "mean", "100_200")`
plot_gdf_da(buffalo_gdf, buffalo_da)
```

Python code detail:

```{python}
from landmapy.polaris import merge_soil # merge soil data from GDF
from landmapy.plot import plot_gdf_da # plot GDF over DA
```

```{python}
print(buffalo_gdf.total_bounds)
%store -r buffalo_da
try:
    buffalo_da
except NameError:
    buffalo_da = merge_soil(buffalo_gdf)
    print("buffalo_da merged soil from buffalo_gdf and stored")
else:
    print("buffalo_da soil merge retrieved")
```

```{python}
#| label: fig-soil
buffalo_gdf['color'] = ['white','red']
plot_gdf_da(buffalo_gdf, buffalo_da, cmap='viridis')
```

### Topographic data

One way to access reliable elevation data is from the
[SRTM dataset](https://www.earthdata.nasa.gov/data/instruments/srtm),
available through the
[earthaccess API](https://earthaccess.readthedocs.io/en/latest/quick-start/).

Write a **function with a numpy-style docstring** that
will download SRTM elevation data for a particular location and
calculate any additional topographic variables you need such as slope or aspect.

Then, use loops to download and organize the rasters you will need to
complete this section. Include topographic parameters that will help you
to answer your scientific question.

> **Warning**
>
> Be careful when computing the slope from elevation that the units of
> elevation match the projection units (e.g. meters and meters, not
> meters and degrees). You will need to project the SRTM data to
> complete this calculation correctly.

Pseudocode:

```python
elevation_dir = create_data_dir('habitat/srtm')
srtm_da = srtm_download(buffalo_gdf, elevation_dir, 0.1)
plot_gdf_da(buffalo_gdf, srtm_da, cmap='terrain')
slope_da = srtm_slope(srtm_da)
plot_gdf_da(buffalo_gdf, slope_da, cmap='terrain')
```

Python code detail:

```{python}
import earthaccess
from landmapy.srtm import srtm_download, srtm_slope
```

```{python}
project_dir = create_data_dir('habitat')
elevation_dir = create_data_dir('habitat/srtm')
elevation_dir
```

```{python}
earthaccess.login()
datasets = earthaccess.search_datasets(keyword='SRTM DEM', count=11)
for dataset in datasets:
    print(dataset['umm']['ShortName'], dataset['umm']['EntryTitle']) # want 'umn'
# want SRTMGL1? 1 arc second = 30m (also, 3, 30 arc second)
```

```{python}
#| label: fig-srtm
srtm_da = srtm_download(buffalo_gdf, elevation_dir, 0.1)
plot_gdf_da(buffalo_gdf, srtm_da, cmap='terrain')
```

```{python}
#| label: fig-slope
slope_da = srtm_slope(srtm_da)
plot_gdf_da(buffalo_gdf, slope_da, cmap='terrain')
```

Alternate plot only inside grasslands.
Want to smooth over `buffalo_gdf` to fill in internal holes.

```{python}
#| label: fig-slopeclip
import matplotlib.pyplot as plt # Overlay raster and vector data

slope_clip_da = slope_da.rio.clip(buffalo_gdf.geometry)
slope_clip_da.plot(cmap='terrain')
#buffalo_gdf.boundary.plot(ax=plt.gca(), color = "black", linewidth=0.5)
plt.show()
```

### Climate model data

You can use MACAv2 data for historical and future climate data. Be sure
to compare at least two 30-year time periods (e.g. historical vs. 10
years in the future) for at least four of the CMIP models. Overall, you
should be downloading at least 8 climate rasters for each of your sites,
for a total of 16. **You will *need* to use loops and/or functions to do
this cleanly!**.

Write a **function with a numpy-style docstring** that
will download MACAv2 data for a particular climate model, emissions
scenario, spatial domain, and time frame.
Then, use loops to download
and organize the 16+ rasters you will need to complete this section.
The MACAv2 dataset is accessible from their 
[Thredds server](http://thredds.northwestknowledge.net:8080/thredds/reacch_climate_CMIP5_macav2_catalog2.html).
Include an arrangement of sites, models, emissions scenarios,
and time periods that will help you to answer your scientific question.

Project precipation `pr` under representative concentration pathway scenarios `rcp45` and `rcp85` for years `2026-2030`.
**To be redone with

- new 30-year date ranges
- `rcp45` and `rcp85`
- summaries or "movies" over 30-year spans

**

Pseudocode:

```python
maca_df = process_maca({'buffalo': buffalo_gdf})
maca_2027_year_da = maca_year(maca_df, 0, 2027) # 0 = `rcp85`, 1 = `rcp45`
plot_gdf_da(buffalo_gdf, maca_2027_year_da)
```

Python code detail:


```{python}
from landmapy.thredds import process_maca, maca_year
```

```{python}
maca_df = process_maca({'buffalo': buffalo_gdf})
maca_df[['site_name', 'scenario', 'climate', 'year']]
```

```{python}
#| label: fig-maca
maca_2027_year_da = maca_year(maca_df, 0, 2027) # 0 = `rcp85`, 1 = `rcp45`
plot_gdf_da(buffalo_gdf, maca_2027_year_da)
```

Repeat for `rcp45`. Make nice plot pair.
Will need to modify `plot_gdf_da()` to return object
rather than create plot.
This probably has some subtleties.

**Reflect and Respond:**
Make sure to include a description of the climate data and how you selected your models.
Include a citation of the MACAv2 data</p></div></div>

YOUR CLIMATE DATA DESCRIPTION AND CITATIONS HERE

## STEP 3: HARMONIZE DATA

Make sure that the grids for all your data match each other.
Check out the 
[`ds.rio.reproject_match()` method](https://corteva.github.io/rioxarray/stable/examples/reproject_match.html#Reproject-Match)
from `rioxarray`.
Make sure to use the data source that has the highest resolution as a template!

> **Warning**
>
> If you are reprojecting data as you need to here, the order of
> operations is important! Recall that reprojecting will typically tilt
> your data, leaving narrow sections of the data at the edge blank.
> However, to reproject efficiently it is best for the raster to be as
> small as possible before performing the operation. We recommend the
> following process:
>
>     1. Crop the data, leaving a buffer around the final boundary
>     2. Reproject to match the template grid (this will also crop any leftovers off the image)

See [3_harmonize](https://github.com/byandell-envsys/habitatSuitability/blob/main/3_harmonize.ipynb).

```{python}
#| label: fig-reproject
buffalo_sand_da = buffalo_da.rio.reproject_match(slope_da)
maca_2027_da = maca_2027_year_da.rio.reproject_match(slope_da)
maca_2027_da.plot()
```


## STEP 4: DEVELOP A FUZZY LOGIC MODEL

A fuzzy logic model is one that is built on expert knowledge rather than
training data. You may wish to use the
[`scikit-fuzzy`](https://pythonhosted.org/scikit-fuzzy/)
library, which includes many utilities for building this sort of model.
In particular, it contains a number of **membership functions** that
can convert your data into values from 0 to 1 using information such as,
for example, the maximum, minimum, and optimal values for soil pH.

To train a fuzzy logic habitat suitability model:

0. Research S. nutans, and find out what optimal values are for each variable
you are using (e.g. soil pH, slope, and current climatological annual precipitation). 
1. For each **digital number** in each raster, assign a **continuous** value
from 0 to 1 for how close that grid square is to the optimum range
(1=optimal, 0=incompatible). 
2. Combine your layers by multiplying them together.
This will give you a single suitability number for each square.
3. Optionally, you may apply a suitability threshold to make
the most suitable areas pop on your map.

> **Tip**
>
> If you use mathematical operators on a raster in Python, it will
> automatically perform the operation for every number in the raster.
> This type of operation is known as a **vectorized** function. **DO NOT
> DO THIS WITH A LOOP!**. A vectorized function that operates on the
> whole array at once will be much easier and faster.

## Fuzzy Model

-   use hill functions to transform harmonized DataArrays into 0-1 DataArrays
-   multiply them together

See

- [4_build](https://github.com/byandell-envsys/habitatSuitability/blob/main/4_build.ipynb)
- [SciKit Fuzzy](https://pypi.org/project/scikit-fuzzy/)

Set thresholds:

- sand at 55 to 85
- slope < 10
- pr above 650

```{python}
from landmapy.explore import ramp_logic
```

```{python}
#| label: fig-rampmaca
ramp_logic(maca_2027_da, (500, 550), (700, 750)).plot()
```

```{python}
#| label: fig-rampsand
ramp_logic(buffalo_sand_da, (50, 60), (80, 90)).plot()
```

```{python}
#| label: fig-rampslope
ramp_logic(slope_da, (0, 5), (15, 20)).plot()
```

## STEP 5: PRESENT YOUR RESULTS

Generate some plots that show your key findings. Don’t forget to
interpret your plots!

```{python}
#| highlight: true
# Create plots
```

YOUR PLOT INTERPRETATION HERE

