
# Notes for Habitat Suitability assignment

**AI overview:**
IPython methods enhance interactive computing in Python, offering features beyond the standard interpreter. Some key methods include:

- Tab Completion:
Simplifies code writing by suggesting attributes and methods of objects or modules as you type.
- Introspection:
Provides detailed information about objects, functions, or modules using ? or ??.
- Magic Commands:
Special commands prefixed with % for tasks like timing code execution (%timeit), running external scripts (%run), or accessing shell commands (!).
- Input Caching:
Stores previous commands and outputs, accessible via _, __, ___ for outputs and _i, _ii, _iii or In[n] for inputs.
- Rich Display:
Enables richer object representations using _ipython_display_() or _repr_*_() methods for custom display formats like HTML or images.
- History:
Allows browsing and reusing previous commands across sessions.
These methods streamline development, debugging, and exploration in interactive Python environments.

## Class

A 
[class](https://docs.python.org/3/tutorial/classes.html)
is a function with output of an object that has new methods, which are in turn functions
defined in the class.
In addition, the `@property` decorator defines attributes for the object.
The main use of classes are to:

- add functionality to class
- streamline different functions with same parameters to keep track of metadata

**AI overview:**
In Python, a class serves as a blueprint for creating objects, which are instances that encapsulate data (attributes) and behavior (methods). Classes facilitate object-oriented programming (OOP) principles, enabling code reusability, modularity, and organization.
A class is defined using the class keyword, followed by the class name and a colon. Inside the class block, attributes and methods are defined. The __init__ method is a special method, known as the constructor, which is automatically called when an object of the class is created. It is used to initialize the object's attributes.

### References

- [Python 3 Documentation](https://docs.python.org/3/)
  - [3. Data model](https://docs.python.org/3/reference/datamodel.html)
  - [9. Classes](https://docs.python.org/3/tutorial/classes.html)
- [Python Classes and Objects (Geeks4Geeks)](https://www.geeksforgeeks.org/python-classes-and-objects/)
- [Python Classes: The Power of Object-Oriented Programming (RealPython)](https://realpython.com/python-classes/)
- [Google's Python Class](https://developers.google.com/edu/python)
- [IPython Reference](https://ipython.org/ipython-doc/3/interactive/reference.html)
  - [Built-in magic commands](https://ipython.readthedocs.io/en/stable/interactive/magics.html)
- [earthpy](https://earthpy.readthedocs.io/en/latest/)
  - [apppeears.py](https://github.com/earthlab/earthpy/blob/apppears/earthpy/appeears.py) (class Elsa created in `earthpy` package)

### Examples

Simple example with representer `__repr__`.

```{python}
import pandas as pd
import xarray as xr

class ArrayDataFrame(pd.DataFrame): # inherits pd.DataFrame class

    def set_array_column(self, arrays):
        self['arrays'] = arrays
        return self

    def __repr__(self):
        for_printing = self.copy()
        for_printing.arrays = [arr.min() for arr in self.arrays]
        return for_printing.__repr__()
```       

```{python}
ArrayDataFrame({'url': ['https://...']}).set_array_column([xr.DataArray()])
```

Show example where class would help.

```{python}
import random
import numpy as np
import xarray as xr

def gen_data_array(size=10):
    data = (
        np.array([random.gauss(0,1) for _ in range(size**2)]).reshape(size, size))
    data = xr.DataArray(
        data = data,
        coords = {
            'x': [i * random.uniform(0,1) for i in range(size)],
            'y': [i * random.uniform(0,1) for i in range(size)]
        },
        dims=['x','y']
    )
    return data
```

```{python}
gen_data_array(10)
```

```{python}
df_len = 10
my_df = pd.DataFrame({
    'id': list(range(df_len)),
    'array': [gen_data_array(10) for _ in range(df_len)]
})
print(my_df)
```

```{python}
class FunDataFrame(pd.DataFrame):
    # represent
    def __repr__(self):
        return 'stuff!'
```

```{python}
my_df
```

Add ipython method (under the hood concept)

```{python}
class FunDataFrame(pd.DataFrame):
    # represent
    def __repr__(self):
        return 'stuff!'
    # ipython method
    def _repr_html_(self):
        return 'more stuff!!!'
```

```{python}
my_df
```


```{python}
class FunDataFrame(pd.DataFrame):

    # attribute to make a dataframe
    @property
    def _df_for_repr_(self):
        df = self.drop(columns = ['array']).copy()
        return df
    # represent
    def __repr__(self):
        return self._df_for_repr_.__repr__()
    # ipython method
    def _repr_html_(self):
        return self._df_for_repr_._repr_html_()
```

```{python}
my_df
```

Set up my dataframe class to show what I want

```{python}
class FunDataFrame(pd.DataFrame):

    # define array_types (does not appear to be used yet) 
    array_types = [xr.DataArray]

    # attribute to return `array_cols`
    @property
    def array_cols(self):
        array_cols = []
        for col in self:
            if type(self[col][0]) == xr.DataArray:
                array_cols.append(col)
                return array_cols

    # more complicated attribute
    @property
    def _df_for_repr_(self):
        df = self.drop(columns = self.array_cols).copy()
        for array_col in self.array_cols:
            arr_str_list = []
            for arr in self[array_col]:
                arr_min = round(float(arr.x.min()), 2)
                arr_max = round(float(arr.x.max()), 2)
                arr_str_list.append(
                    f'DataArray(x ({arr_min}, {arr_max}))'
                )
            df[array_col] = arr_str_list
            #df[array_col] = ['DataArray' for _ in range(len(df))]
        return df
    
    # represent
    def __repr__(self):
        return self._df_for_repr_.__repr__()
    # ipython method
    def _repr_html_(self):
        return self._df_for_repr_._repr_html_()
```

```{python}
my_df = FunDataFrame({
    'id': list(range(df_len)),
    'array': [gen_data_array(10) for _ in range(df_len)],
    'array2': [gen_data_array(10) for _ in range(df_len)]})
my_df
```

