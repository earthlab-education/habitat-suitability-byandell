
### Scatter Plots with GGplot

```{python}
%run ~/Documents/GitHub/landmapy/landmapy/process.py
```

```{python}
#| eval: False
pip install --quiet git+https://github.com/byandell-envsys/landmapy.git
```

```{python}
import pandas as pd
import geopandas as gpd # read geojson file into gdf
import matplotlib.pyplot as plt # Overlay raster and vector data
import xarray as xr

from landmapy.initial import create_data_dir # create (or retrieve) data directory
from landmapy.plot import plot_gdf_state # plot gdf with state overlay
from landmapy.plot import plot_gdf_da # plot GDF over DA
from landmapy.plot import plot_das # plot DAs in rows
from landmapy.process import da_combine
from landmapy.polaris import merge_soil # merge soil data from GDF
from landmapy.srtm import srtm_download, srtm_slope # process SRTM data
from landmapy.thredds import process_maca, maca_year # process MACA THREDDS
from landmapy.explore import ramp_logic # ramp for fuzzy logic
```

```{python}
%store -r buffalo_gdf, buffalo_da, slope_da, maca_da
```

```{python}
print(slope_da.shape)
print(buffalo_da.shape)
print(maca_da[0].shape)
```

While images should be reprojected to a higher resolution,
associations among measurements should probably
be assessed on the lower resolution.

```{python}
sand_low_da = buffalo_da.rio.reproject_match(maca_das[0]).rio.clip(buffalo_gdf.geometry)
slope_low_da = slope_da.rio.reproject_match(maca_das[0]).rio.clip(buffalo_gdf.geometry)
```

```{python}
era_rcp = ['now45','now85','fut45','fut85']
maca_low_da = {}
for i in list(range(maca_das.shape[0])):
    maca_low_da[era_rcp[i]] = maca_das[i].rio.clip(buffalo_gdf.geometry)
```

```{python}
print(sand_low_da.shape)
print(slope_low_da.shape)
for i in list(range(maca_das.shape[0])):
    print(maca_low_da[era_rcp[i]].shape)
```

Create DataFrame with all measurements.

```{python}
maca_low_da['now45']
```

```{python}
maca_df = merge_da_df(maca_low_da)
```

```{python}
hab_df = merge_da_df({'sand': sand_low_da, 'slope': slope_low_da})
hab_df = hab_df.rename(columns={'y': 'lat', 'x': 'lon'})
hab_df = pd.merge(maca_df, hab_df, on=['lat','lon'])
```

```{python}
hab_df
```

```{python}
hab_df = pd.merge(hab_df, maca_df, on=["x", "y"])
```

```{python}
#| eval: false
pip install --quiet plotnine
```

```{python}
#| eval: false
from plotnine import ggplot, aes, geom_point, geom_abline

(
    ggplot(hab_df)
        + aes(x = 'now45', y = 'now85')
        + geom_abline(slope=1, intercept=0, color="blue")
        + geom_point()
)
```
