
### Scatter Plots with GGplot

```{python}
#| eval: false
pip install --quiet plotnine scikit-misc
```

```{python}
import pandas as pd
import xarray as xr
import matplotlib.pyplot as plt

from landmapy.process import merge_da_df
```

```{python}
%run ggplot.py
```

```{python}
%store -r buffalo_gdf buffalo_da slope_da maca_da
```

```{python}
print(slope_da.shape)
print(buffalo_da.shape)
print(maca_da[0].shape)
```

While images should be reprojected to a higher resolution,
associations among measurements should probably
be assessed on the lower resolution.

```{python}
maca_das = xr.concat(
    [maca_da[1][list(range(30))].mean(dim='time'),
    maca_da[0][list(range(30))].mean(dim='time'),
    maca_da[1][list(range(30,60))].mean(dim='time'),
    maca_da[0][list(range(30,60))].mean(dim='time')],
    dim = 'era_rcp')
era_rcp = ['now45','now85','fut45','fut85']
maca_das = maca_das.assign_coords(era_rcp=era_rcp)
```

```{python}
sand_low_da = buffalo_da.rio.reproject_match(maca_das[0]).rio.clip(buffalo_gdf.geometry)
slope_low_da = slope_da.rio.reproject_match(maca_das[0]).rio.clip(buffalo_gdf.geometry)
```

```{python}
maca_low_da = {}
for i in list(range(maca_das.shape[0])):
    maca_low_da[era_rcp[i]] = maca_das[i].rio.clip(buffalo_gdf.geometry)
```

```{python}
print(sand_low_da.shape)
print(slope_low_da.shape)
for i in list(range(maca_das.shape[0])):
    print(maca_low_da[era_rcp[i]].shape)
```

Create DataFrame with all measurements.

```{python}
maca_df = merge_da_df(maca_low_da)
```

```{python}
hab_df = merge_da_df({'sand': sand_low_da, 'slope': slope_low_da})
hab_df = hab_df.rename(columns={'y': 'lat', 'x': 'lon'})
hab_df = pd.merge(maca_df, hab_df, on=['lat','lon'])
```

```{python}
hab_df
```

```{python}
ggplot_xy(hab_df, 'now45', 'now85', identity=True)
```

```{python}
ggplot_xy(hab_df, 'now45', 'fut45', identity=True)
```

```{python}
ggplot_xy(hab_df, 'sand', 'slope', log = ['x','y'])
```

```{python}
ggplot_xy(hab_df, 'now45', 'slope', log = ['y'])
```

```{python}
p_sand = [ggplot_xy(hab_df, y, 'sand', log=['y']) for y in era_rcp]
for p in p_sand:
    print(p)
```

## Look over time at MACA

### Pivot (melt) to longer format

For one set:

```{python}
tmp = maca_da[1][list(range(30))]
now45_dict = {time: tmp[time, :, :] for time in range(tmp.shape[0])}
now45_df = merge_da_df(now45_dict, quiet=True).melt(id_vars=['lat','lon'], var_name='time')
now45_df['time'] = 2006 + now45_df['time'].astype(int)
```

```{python}
ggplot_xy(now45_df, 'time','value', method="loess")
```

For all sets:

    [maca_da[1][list(range(30))].mean(dim='time'),
    maca_da[0][list(range(30))].mean(dim='time'),
    maca_da[1][list(range(30,60))].mean(dim='time'),
    maca_da[0][list(range(30,60))].mean(dim='time')],
era_rcp = ['now45','now85','fut45','fut85']

```{python}
def melt_maca(maca_da, rcp = ['85','45'], yearone = 2006):
    import pandas as pd
    out_df = pd.DataFrame(columns=['lat', 'lon','time','rcp'])
    for i in [1,0]:
        tmp = maca_da[1]
        ntime = tmp.shape[0]
        tmp = {time: tmp[time, :, :] for time in range(ntime)}
        new_df = merge_da_df(tmp, quiet=True).melt(
            id_vars=['lat','lon'], var_name='time')
        new_df['time'] = new_df['time'].astype(int)
        new_df['rcp'] = rcp[i]
        new_df['period'] = ['now' if time < (ntime / 2) else 'fut' for time in new_df['time']]
        new_df['time'] += yearone
        out_df = pd.concat([out_df, new_df], ignore_index=True)

    # Make sure time is integer
    out_df['time'] = out_df['time'].astype(int)
    out_df['rcp'] = pd.Categorical(out_df['rcp'], categories=['45', '85'], ordered=True)
    out_df['period'] = pd.Categorical(out_df['period'], categories=['now', 'fut'], ordered=True)
    return out_df
```

```{python}
year_df = melt_maca(maca_da)
year_df
```

```{python}
from plotnine import facet_grid
(
    ggplot_xy(year_df, 'time','value', method="loess") +
    facet_grid(rows = "rcp", cols = "period", scales="free_x")
)
```
